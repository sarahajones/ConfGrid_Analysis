anovaData <- rbind(anovaData, model2)
#summedDistance
model3 <- as.data.frame(PID)
model3$Rvalue <- rValues$V3
model3$model <- "summedDistance"
model3$type <- "pure"
model3$distance <- "sum"
anovaData <- rbind(anovaData, model3)
#asym_minimumDistance
model4 <- as.data.frame(PID)
model4$Rvalue <- rValues$V4
model4$model <- "asym_minimumDistance"
model4$type <- "asym"
model4$distance <- "min"
anovaData <- rbind(anovaData, model4)
#asym_maximumDistance
model5 <- as.data.frame(PID)
model5$Rvalue <- rValues$V5
model5$model <- "asym_maximumDistance"
model5$type <- "asym"
model5$distance <- "max"
anovaData <- rbind(anovaData, model5)
#asym_summedDistance
model6 <- as.data.frame(PID)
model6$Rvalue <- rValues$V6
model6$model <- "asym_summedDistance"
model6$type <- "asym"
model6$distance <- "sum"
anovaData <- rbind(anovaData, model6)
#scaled_minDistance
model7 <- as.data.frame(PID)
model7$Rvalue <- rValues$V7
model7$model <- "scaled_minDistance"
model7$type <- "scale"
model7$distance <- "min"
anovaData <- rbind(anovaData, model7)
#scaled_maxDistance
model8 <- as.data.frame(PID)
model8$Rvalue <- rValues$V8
model8$model <- "scaled_maxDistance"
model8$type <- "scale"
model8$distance <- "max"
anovaData <- rbind(anovaData, model8)
#scaled_sumDistance
model9 <- as.data.frame(PID)
model9$Rvalue <- rValues$V9
model9$model <- "scaled_sumDistance"
model9$type <- "scale"
model9$distance <- "sum"
anovaData <- rbind(anovaData, model9)
rm(model2, model3, model4, model5, model6, model7, model8, model9)
anovaData$model <- as.factor(anovaData$model)
anovaData$type <- as.factor(anovaData$type)
anovaData$distance <- as.factor(anovaData$distance)
#withinPID?
rValueAOV <- aov_ez(id="PID", dv="Rvalue", data=anovaData, within = c("type","distance"))
rValueAOV
#check the pairwise comparisons
int_comp <- emmeans(rValueAOV, ~ type + distance + type*distance)
pairs(int_comp,adjust="none")
#tidy up the environment
rm(minSig, maxSig, sumSig, minModel, maxModel, sumModel, i, dataX, index, correlations,
DistCol, DistSize, sigCorrs, pValue, rValue, highest,
asym_maxModel, asym_maxSig, asym_minModel,
asym_minSig, asym_sumModel,  asym_sumSig,  scale_maxModel,
scale_minModel,  scale_sumModel, scale_minSig, scale_maxSig,
scale_sumSig, scale_scaleModel, scale_scaleSig, rValues)
############### 3.2 Using Likelihoods to assess fit ##########################
#likelihood comparisons might be the way to go.
#the likelihood of it being from model X given the data Y
############### 4.0 Response bound work #######################################
#looking at response based bound as a fixed individual bound in the space
#this bound within individual will become the basis to rerun the above models
responseData <- confidence[c("PID", "distribution_name", "button", "correct", "confidence","fish_color", "fish_size")]
responseData$fish_size <- ((responseData$fish_size-200)/600) #put size in 0-1 space
#find one person as an example
pp1 <- subset(responseData, PID ==1)
ggplot(data=pp1, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, color = button))
#can see the vaguely follow the vertical and horizontal - but how will we define this?
#now lets find the response based boundary per participant
colorVector <- seq(0, 1, length.out = 100)
sizeVector <- seq(0, 1, length.out = 100)
countVerticalBlue <- matrix(data = NA, nrow = 100, ncol = 100)
countHorizontalRed <- matrix(data = NA, nrow = 100, ncol = 100)
countHorizontalBlue <- matrix(data = NA, nrow = 100, ncol = 100)
responseBound <- matrix(data = NA, nrow = length(PID), ncol = 2)
for(i in PID){ #for each pp
data <- subset(responseData, PID == i)
for(val in colorVector){
j <- match(c(val), colorVector) #set the horizontal value and index
for(value in sizeVector){
k <- match(c(value),sizeVector) #set the vertical value and index
#set size as the rows and color as the column - so each column holds a size constant
countVerticalBlue[k,j] <- sum(data$fish_size < value & data$button == 1)
countHorizontalRed[k,j] <- sum(data$fish_color > val & data$fish_size > value & data$button == 0)
countHorizontalBlue [k,j] <- sum(data$fish_color < val & data$fish_size > value & data$button == 1)
}
}
totalWrong <- countVerticalBlue + countHorizontalRed + countHorizontalBlue
indices <- which(totalWrong == min(totalWrong), arr.ind = TRUE) #find the minimum value index
colors <- unique(indices[,2])
sizes <- unique(indices[,1])
if (length(colors) == 1){
responseBound[i, 1] <- colorVector[colors[1]]
} else if(length(colors) %% 2 != 0){
responseBound[i, 1] <- colorVector[median(colors)]
} else if(length(colors)%% 2 == 0 & length(colors) < length(indices[,2])){
responseBound[i,1] <- colorVector[getmode(indices[,2])]
} else {responseBound[i,1] <- colorVector[mean(colors)]} ####PROBLEM HERE
if (length(sizes) == 1){
responseBound[i, 2] <- sizeVector[sizes[1]]
} else if(length(sizes) %% 2 != 0){
responseBound[i, 2] <- sizeVector[median(sizes)]
} else if(length(sizes)%% 2 == 0 & length(sizes) < length(indices[,1])){
responseBound[i,2] <- sizeVector[getmode(indices[,1])]}
else {responseBound[i,2] <- sizeVector[mean(sizes)]} ###PROBLEM HERE
}
responseBound <- as.data.frame(responseBound)
responseBound$PID <- PID
responseBound$VerticalSize <- responseBound$V2
responseBound$HorizontalColor <- responseBound$V1
responseBound <- responseBound %>% select(-V1, -V2)
confidence <- merge(confidence, responseBound, by = c("PID"))
#plot these boundaries to sanity check them
confidence$fish_size <- ((confidence$fish_size-200)/600) #put size in 0-1 space
ggplot(data=confidence, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, shape = button_label, color = confidence, alpha = button_label)) +
scale_color_gradient(low = "blue", high = "red") +
scale_alpha_manual(values=c(0.2,0.5)) +
geom_vline(aes(xintercept = VerticalSize)) +
geom_hline(aes(yintercept = HorizontalColor)) +
facet_wrap( ~ PID)
############### 4.1 Adjust response bounds - constrain spaced #################
# we want to make sure that each "quadrant" of the subject bound
# contains some data = so that the don't fit to an empty quadrant space
# (will constrain locations for response bound itself)
#now lets find the response based boundary per participant
countVerticalBlue <- matrix(data = NA, nrow = 100, ncol = 100)
countVerticalRed <- matrix(data = NA, nrow = 100, ncol = 100)
countHorizontalRed <- matrix(data = NA, nrow = 100, ncol = 100)
countHorizontalBlue <- matrix(data = NA, nrow = 100, ncol = 100)
responseBound <- matrix(data = NA, nrow = length(PID), ncol = 2)
constrainCutOff <- 3 #value of minimum number of data points that must sit in each quadrant
for(i in PID){ #for each pp
data <- subset(responseData, PID == i)
for(val in colorVector){
j <- match(c(val), colorVector) #set the horizontal value and index
for(value in sizeVector){
k <- match(c(value),sizeVector) #set the vertical value and index
#set size as the rows and color as the column - so each column holds a size constant
if(sum(data$fish_size < value & data$fish_color < val) > constrainCutOff)(
countVerticalBlue[k,j] <- sum(data$fish_size < value & data$fish_color < val & data$button == 1)
) else (countVerticalBlue[k,j] <- NA)
if(sum(data$fish_size < value & data$fish_color > val) > constrainCutOff)(
countVerticalRed[k,j] <- sum(data$fish_size < value & data$fish_color > val & data$button == 1)
) else (countVerticalRed[k, j] <- NA)
if(sum(data$fish_color > val & data$fish_size > value) > constrainCutOff)(
countHorizontalRed[k,j] <- sum(data$fish_color > val & data$fish_size > value & data$button == 0)
) else (countHorizontalRed[k,j] <- NA)
if(sum(data$fish_color < val & data$fish_size > value) > constrainCutOff)(
countHorizontalBlue [k,j] <- sum(data$fish_color < val & data$fish_size > value & data$button == 1)
) else (countHorizontalBlue[k,j] <- NA)
}
}
totalWrong <- countVerticalBlue + countHorizontalRed + countHorizontalBlue +countVerticalRed
indices <- which(totalWrong == min(totalWrong, na.rm = TRUE), arr.ind = TRUE) #find the minimum value index
colors <- unique(indices[,2])
sizes <- unique(indices[,1])
if (length(colors) == 1){
responseBound[i, 1] <- colorVector[colors[1]]
} else if(length(colors) %% 2 != 0){
responseBound[i, 1] <- colorVector[median(colors)]
} else if(length(colors)%% 2 == 0 & length(colors) < length(indices[,2])){
responseBound[i,1] <- colorVector[getmode(indices[,2])]
} else {responseBound[i,1] <- colorVector[mean(colors)]}
if (length(sizes) == 1){
responseBound[i, 2] <- sizeVector[sizes[1]]
} else if(length(sizes) %% 2 != 0){
responseBound[i, 2] <- sizeVector[median(sizes)]
} else if(length(sizes)%% 2 == 0 & length(sizes) < length(indices[,1])){
responseBound[i,2] <- sizeVector[getmode(indices[,1])]}
else {responseBound[i,2] <- sizeVector[mean(sizes)]}
}
responseBound <- as.data.frame(responseBound)
responseBound$PID <- PID
responseBound$VerticalSizeConst <- responseBound$V2
responseBound$HorizontalColorConst <- responseBound$V1
responseBound <- responseBound %>% select(-V1, -V2)
confidence <- merge(confidence, responseBound, by = c("PID"))
#plot these boundaries to sanity check them
responsePlot <- ggplot(data=confidence, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, color = button_label, shape = button_label)) +
geom_vline(aes(xintercept = VerticalSizeConst)) +
geom_hline(aes(yintercept = HorizontalColorConst)) +
facet_wrap( ~ PID); responsePlot
############### 5.0 Refit models with individual response bounds ##############
#refit the above models with individual response boundaries in place (not objective boundary)
#we do this with 9 models (dropping the scaled/scaled model) to create a 3*3 factorial matrix
modelData$HorizontalColor <- confidence$HorizontalColorConst
modelData$VerticalSize <- confidence$VerticalSizeConst
#find distances to color and size boundary again
DistCol <- abs((modelData$HorizontalColor) - modelData$fish_color)#pick color here
DistSize <- abs((modelData$VerticalSize) - modelData$fish_size) #pick size here
scaleCol <- abs(1-modelData$HorizontalColor)
scaleSize <- abs(1- modelData$VerticalSize)
#Let's consider:
#Minimum distance to bound (out of the two dimensions)
modelData <- modelData %>%
mutate(minimumDistanceRB = ifelse(((DistCol-DistSize)>0),  DistSize, DistCol)) %>%
mutate(minimumDistanceRB = case_when(
minimumDistanceRB == DistSize ~ minimumDistanceRB*scaleSize,
TRUE ~ minimumDistanceRB*scaleCol
)) %>%
mutate(minimumDistanceRB =  (((minimumDistanceRB))*100)) %>%
#Maximum distance to bound (out of the two dimensions)
mutate(maximumDistanceRB = ifelse(((DistCol-DistSize)<0), DistSize, DistCol)) %>%
mutate(maximumDistanceRB = case_when(
maximumDistanceRB == DistSize ~ maximumDistanceRB*scaleSize,
TRUE ~ maximumDistanceRB*scaleCol
)) %>%
mutate(maximumDistanceRB = (((maximumDistanceRB))*100)) %>%
# Summed distance to bound (along the two dimensions)
mutate(summedDistanceRB = (DistCol + DistSize)) %>%
mutate(summedDistanceRB = (((summedDistanceRB/(scaleCol+scaleSize))*100)))
# now for the asymmetrical cases:
#• Minimum distance to bound (out of the two dimensions)
modelData <- modelData %>%
mutate(asym_minimumDistanceRB = case_when (
relevantBoundary == 1 ~ DistSize,
relevantBoundary == 2 ~ DistCol,
)) %>%
#now let's look at the O category
mutate(minDistCol = case_when (
grid_box == "box2_2" ~ DistCol,
grid_box == "box3_3" ~ DistCol,
grid_box == "box2_3" ~ DistCol,
grid_box == "box3_2" ~ DistCol
)) %>%
mutate(minDistSize = case_when (
grid_box == "box2_2" ~ DistSize,
grid_box == "box3_3" ~ DistSize,
grid_box == "box2_3" ~ DistSize,
grid_box == "box3_2" ~ DistSize
)) %>%
mutate(asym_minimumDistanceRB = case_when (
relevantBoundary == 3 & (minDistCol-minDistSize)> 0 ~ minDistSize,
relevantBoundary == 3 & (minDistCol-minDistSize)< 0 ~ minDistCol,
#set rest of O category space explicitly
grid_box == "box2_3" & (minDistCol-minDistSize)< 0 ~ minDistCol,
grid_box == "box3_2" & (minDistCol-minDistSize)< 0 ~ minDistCol,
grid_box == "box2_3" & (minDistCol-minDistSize)> 0 ~ minDistSize,
grid_box == "box3_2" & (minDistCol-minDistSize)> 0 ~ minDistSize,
TRUE ~ asym_minimumDistanceRB #minimum distance is scaled from 0-0.66
)) %>%
mutate(asym_minimumDistanceRB = case_when(
asym_minimumDistanceRB == DistCol ~ asym_minimumDistanceRB*scaleCol,
TRUE ~ asym_minimumDistanceRB*scaleSize
))%>%
mutate(asym_minimumDistanceRB = case_when ( #overwrite for grid_box1_1
grid_box == "box1_1" ~ (pythagorean(DistCol,DistSize))*(mean(DistCol +DistSize)),
TRUE ~ asym_minimumDistanceRB
)) %>%
mutate(asym_minimumDistanceRB = asym_minimumDistanceRB*100)
modelData <- subset(modelData, select = -c(minDistCol, minDistSize))
#• Maximum distance to bound (out of the two dimensions)
modelData <- modelData %>%
mutate(asym_maximumDistanceRB = case_when (
relevantBoundary == 1 ~ DistSize,
relevantBoundary == 2 ~ DistCol,
)) %>% #now let's look at the border cases
mutate(maxDistCol = case_when (
grid_box == "box1_1" ~ DistCol,
grid_box == "box2_2" ~ DistCol,
grid_box == "box3_3" ~ DistCol,
grid_box == "box2_3" ~ DistCol,
grid_box == "box3_2" ~ DistCol
)) %>%
mutate(maxDistSize = case_when (
grid_box == "box1_1" ~ DistSize,
grid_box == "box2_2" ~ DistSize,
grid_box == "box3_3" ~ DistSize,
grid_box == "box2_3" ~ DistSize,
grid_box == "box3_2" ~ DistSize
)) %>%
mutate(asym_maximumDistanceRB = case_when (
relevantBoundary == 3 & (maxDistCol-maxDistSize)> 0 ~ maxDistCol,
relevantBoundary == 3 & (maxDistCol-maxDistSize)< 0 ~ maxDistSize,
grid_box == "box2_3" & (maxDistCol-maxDistSize)> 0 ~ maxDistCol,
grid_box == "box3_2" & (maxDistCol-maxDistSize)> 0 ~ maxDistCol,
grid_box == "box2_3" & (maxDistCol-maxDistSize)< 0 ~ maxDistSize,
grid_box == "box3_2" & (maxDistCol-maxDistSize)< 0 ~ maxDistSize,
TRUE ~ asym_maximumDistanceRB
))  %>%
mutate(asym_maximumDistanceRB = case_when(
asym_maximumDistanceRB == DistSize ~ asym_maximumDistanceRB*scaleSize,
TRUE ~  asym_maximumDistanceRB*scaleCol
)) %>%
mutate(asym_maximumDistanceRB = case_when (#overwrite grid_box1_1 in a different way
grid_box == "box1_1" ~ (pythagorean(DistCol,DistSize))*(mean(DistCol +DistSize)),
TRUE ~ asym_maximumDistanceRB
))%>%
mutate(asym_maximumDistanceRB = ((asym_maximumDistanceRB)*100))
modelData <- subset(modelData, select = -c(maxDistCol, maxDistSize))
#• Summed distance to bound (along the two dimensions)
modelData <- modelData %>%
mutate(asym_summedDistanceRB = case_when (
relevantBoundary == 1 ~ DistSize,
relevantBoundary == 2 ~ DistCol,
)) %>% #now let's look at the border cases
mutate(sumDistCol = case_when (
grid_box == "box2_2" ~ DistCol,
grid_box == "box3_3" ~ DistCol,
grid_box == "box2_3" ~ DistCol,
grid_box == "box3_2" ~ DistCol
)) %>%
mutate(sumDistSize = case_when (
grid_box == "box2_2" ~ DistSize,
grid_box == "box3_3" ~ DistSize,
grid_box == "box2_3" ~ DistSize,
grid_box == "box3_2" ~ DistSize
)) %>%
mutate(asym_summedDistanceRB = case_when (
relevantBoundary == 3  ~ sumDistCol + sumDistSize,
grid_box == "box2_3" ~ sumDistCol + sumDistSize,
grid_box == "box3_2" ~ sumDistCol + sumDistSize,
TRUE ~ asym_summedDistanceRB
)) %>%
mutate(asym_summedDistanceRB = case_when (#overwrite grid_box1_1 in a different way
grid_box == "box1_1" ~ (pythagorean(DistCol,DistSize))*(mean(DistCol+DistSize)),
TRUE ~ asym_summedDistanceRB
))%>%
mutate(asym_summedDistanceRB = case_when(
asym_summedDistanceRB == (DistCol + DistSize) ~ (asym_summedDistanceRB/(scaleCol + scaleSize))*100,
asym_summedDistanceRB == DistCol ~ (asym_summedDistanceRB*(scaleCol))*100,
asym_summedDistanceRB == DistSize ~ (asym_summedDistanceRB*(scaleSize))*100,
TRUE ~ asym_summedDistanceRB*100))
modelData <- subset(modelData, select = -c(sumDistCol, sumDistSize, relevantBoundary))
#now consider the stimulus scaled models
modelData <- modelData %>%
mutate(scaled_minDistanceRB = (((1- fish_size) + (1-fish_color))/2)) %>%
mutate(scaled_minDistanceRB = case_when(
grid_box == "box2_2" ~ minimumDistanceRB,
grid_box == "box2_3" ~ minimumDistanceRB,
grid_box == "box3_2" ~ minimumDistanceRB,
grid_box == "box3_3" ~ minimumDistanceRB,
TRUE ~ scaled_minDistanceRB*100
)) %>%
mutate(scaled_maxDistanceRB = (((1- fish_size) + (1-fish_color))/2)
) %>%
mutate(scaled_maxDistanceRB = case_when(
grid_box == "box2_2" ~ maximumDistanceRB,
grid_box == "box2_3" ~ maximumDistanceRB,
grid_box == "box3_2" ~ maximumDistanceRB,
grid_box == "box3_3" ~ maximumDistanceRB,
TRUE ~ scaled_maxDistanceRB*100
)) %>%
mutate(scaled_sumDistanceRB = (((1- fish_size) + (1-fish_color))/2)
) %>%
mutate(scaled_sumDistanceRB = case_when(
grid_box == "box2_2" ~ summedDistanceRB,
grid_box == "box2_3" ~ summedDistanceRB,
grid_box == "box3_2" ~ summedDistanceRB,
grid_box == "box3_3" ~ summedDistanceRB,
TRUE ~ scaled_sumDistanceRB*100
)) %>%
mutate(scaled_scaledRB = (((1- fish_size) + (1-fish_color))/2)
) %>%
mutate(scaled_scaledRB = case_when(
grid_box == "box2_2" ~ 1-scaled_scaledRB,
grid_box == "box2_3" ~ 1-scaled_scaledRB,
grid_box == "box3_2" ~ 1-scaled_scaledRB,
grid_box == "box3_3" ~ 1-scaled_scaledRB,
TRUE ~ scaled_scaledRB
)) %>%
mutate(scaled_scaledRB = scaled_scaledRB*100)
#remove any awkward trials with predicted confidence >100
#this emerges in summed, asym_summed, and scaled_sum
#because some peoples boundary on color is way too high (affects at most 107 trials)
#seen across a nest of 7 pp and 107 trials for pure summed,
#3 pp and 19 trials from asym_sum and scaled sum
#modelData <-subset(modelData, summedDistanceRB <100) #remove these
############### 5.1 ANOVA on second order RB model values #####################
# run correlation within each individual for the 9 models
pValue <- matrix(data = NA, nrow = numParticipants, ncol = 9)
rValue <- matrix(data = NA, nrow = numParticipants, ncol = 9)
PID <- c(1:numParticipants)
for(i in PID){
dataX <- subset(modelData, PID == i)
dataX <- dataX[c("confidence",
"minimumDistanceRB","maximumDistanceRB", "summedDistanceRB",
"asym_minimumDistanceRB", "asym_maximumDistanceRB", "asym_summedDistanceRB",
"scaled_minDistanceRB", "scaled_maxDistanceRB", "scaled_sumDistanceRB")]
correlations <- rcorr(as.matrix(dataX))
pValue[i,] <- correlations$P[1,2:10]
rValue[i,] <- correlations$r[1,2:10]
}
#check which of these correlations are significant
sigCorrs <- ifelse((pValue<0.05),  rValue, NA) #just highlights what corrs are significant
minSig <- numParticipants - sum(is.na(sigCorrs[,1])) #26/58 sig corr for min model --- marginally highest num here
maxSig <- numParticipants - sum(is.na(sigCorrs[,2])) #19/58 sig corr for max model
sumSig <- numParticipants - sum(is.na(sigCorrs[,3])) #24/58 sig for summed model
asym_minSig <- numParticipants - sum(is.na(sigCorrs[,4])) #20/58 sig corr for asym_min model
asym_maxSig <- numParticipants - sum(is.na(sigCorrs[,5])) #16/58 sig corr for asym_max model
asym_sumSig <- numParticipants - sum(is.na(sigCorrs[,6])) #22/58 sig for asym_summed model
scale_minSig <- numParticipants - sum(is.na(sigCorrs[,7])) #24/58
scale_maxSig <- numParticipants - sum(is.na(sigCorrs[,8])) #25/58
scale_sumSig <- numParticipants - sum(is.na(sigCorrs[,9])) #29/58
#identify the largest correlation for each pp
highest <- matrix(data = NA, nrow = numParticipants, ncol = 9)
for(i in PID){
dataX <-rValue[i,]
index <- which.max(dataX)
highest[i,index] <- max(dataX)
} #these are the strongest within individual correlations (not necessarily sig corrs)
minModel <- numParticipants - sum(is.na(highest[,1])) #9/58 show strongest corr for min model
maxModel <- numParticipants - sum(is.na(highest[,2])) #2/58 show strongest corr for max model
sumModel <- numParticipants - sum(is.na(highest[,3])) #7/58 show strongest corr for summed model
asym_minModel <- numParticipants - sum(is.na(highest[,4])) #5/58 show strongest corr for min model
asym_maxModel <- numParticipants - sum(is.na(highest[,5])) #2/58 show strongest corr for max model
asym_sumModel <- numParticipants - sum(is.na(highest[,6])) #6/58 show strongest corr for summed model
scale_minModel <- numParticipants - sum(is.na(highest[,7])) #10/58
scale_maxModel <- numParticipants - sum(is.na(highest[,8])) #25/58
scale_sumModel <- numParticipants - sum(is.na(highest[,9])) #12/58
#second order stats on the r-values of the model correlations to confidence
#running anova  R values from the correlations with confidence
#minimumDistance
rValues <- as.data.frame(rValue)
anovaData <- as.data.frame(PID)
anovaData$Rvalue <- rValues$V1
anovaData$model <- "minimumDistance"
anovaData$type <- "pure"
anovaData$distance <- "min"
#maximumDistance
model2 <- as.data.frame(PID)
model2$Rvalue <- rValues$V2
model2$model <- "maximumDistance"
model2$type <- "pure"
model2$distance <- "max"
anovaData <- rbind(anovaData, model2)
#summedDistance
model3 <- as.data.frame(PID)
model3$Rvalue <- rValues$V3
model3$model <- "summedDistance"
model3$type <- "pure"
model3$distance <- "sum"
anovaData <- rbind(anovaData, model3)
#asym_minimumDistance
model4 <- as.data.frame(PID)
model4$Rvalue <- rValues$V4
model4$model <- "asym_minimumDistance"
model4$type <- "asym"
model4$distance <- "min"
anovaData <- rbind(anovaData, model4)
#asym_maximumDistance
model5 <- as.data.frame(PID)
model5$Rvalue <- rValues$V5
model5$model <- "asym_maximumDistance"
model5$type <- "asym"
model5$distance <- "max"
anovaData <- rbind(anovaData, model5)
#asym_summedDistance
model6 <- as.data.frame(PID)
model6$Rvalue <- rValues$V6
model6$model <- "asym_summedDistance"
model6$type <- "asym"
model6$distance <- "sum"
anovaData <- rbind(anovaData, model6)
#scaled_minDistance
model7 <- as.data.frame(PID)
model7$Rvalue <- rValues$V7
model7$model <- "scaled_minDistance"
model7$type <- "scale"
model7$distance <- "min"
anovaData <- rbind(anovaData, model7)
#scaled_maxDistance
model8 <- as.data.frame(PID)
model8$Rvalue <- rValues$V8
model8$model <- "scaled_maxDistance"
model8$type <- "scale"
model8$distance <- "max"
anovaData <- rbind(anovaData, model8)
#scaled_sumDistance
model9 <- as.data.frame(PID)
model9$Rvalue <- rValues$V9
model9$model <- "scaled_sumDistance"
model9$type <- "scale"
model9$distance <- "sum"
anovaData <- rbind(anovaData, model9)
rm(model2, model3, model4, model5, model6, model7, model8, model9)
anovaData$model <- as.factor(anovaData$model)
anovaData$type <- as.factor(anovaData$type)
anovaData$distance <- as.factor(anovaData$distance)
#oneway ANOVA
rValueAOV2 <- aov_ez(id="PID", dv="Rvalue", data=anovaData, within = c("type","distance"));rValueAOV
test <- aov(Rvalue ~ distance + type + distance*type, data = anovaData)
summary(rValueAOV2)
int_comp2 <- emmeans(rValueAOV2, ~ type + distance + type*distance)
pairs(int_comp2,adjust="none")
#tidy up the environment
rm(minSig, maxSig, sumSig, minModel, maxModel, sumModel, i, dataX, index, correlations,
DistCol, DistSize, sigCorrs, pValue, rValue, highest,
asym_maxModel, asym_maxSig, asym_minModel,
asym_minSig, asym_sumModel,  asym_sumSig,  scale_maxModel,
scale_minModel,  scale_sumModel, scale_minSig, scale_maxSig,
scale_sumSig, rValues)
###############################################################################
rValueAOV
summary(rValueAOV)
summary(rValueAOV2)
int_comp2 <- emmeans(rValueAOV2, ~ type + distance + type*distance)
pairs(int_comp2,adjust="none")
