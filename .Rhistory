) %>%
mutate(maximumDistance = ((maximumDistance/(2/3))*100)) %>%
# Summed distance to bound (along the two dimensions)
mutate(summedDistance = (((DistCol + DistSize)/(4/3))*100)
)
cor.test(modelData$confidence, modelData$minimumDistance) #corr = 0.111, highest overall corr in minmodel
cor.test(modelData$confidence, modelData$maximumDistance) #corr = 0.064
cor.test(modelData$confidence, modelData$summedDistance)  #corr = 0.09
#not ideal way to look at these data
#instead: run correlation within each individual for the 3 models
pValue <- matrix(data = NA, nrow = numParticipants, ncol = 3)
rValue <- matrix(data = NA, nrow = numParticipants, ncol = 3)
PID <- c(1:numParticipants)
for(i in PID){
dataX <- subset(modelData, PID == i)
dataX <- dataX[c("confidence", "minimumDistance","maximumDistance", "summedDistance")]
correlations <- rcorr(as.matrix(dataX))
pValue[i,] <- correlations$P[1,2:4]
rValue[i,] <- correlations$r[1,2:4]
}
#check which of these correlations are significant
sigCorrs <- rValue
sigCorrs <- ifelse((pValue<0.05),  rValue, NA) #just highlights what corrs are significant
minSig <- numParticipants - sum(is.na(sigCorrs[,1])) #26/58 sig corr for min model --- marginally highest num here
maxSig <- numParticipants - sum(is.na(sigCorrs[,2])) #16/58 sig corr for max model
sumSig <- numParticipants - sum(is.na(sigCorrs[,3])) #24/58 sig for summed model
#numerical winner is min distance model in terms of most sig corrs but still not even 50%
#for some pp no corrs are sig, for some all are sig - this is not meaningful comparison to look into
#will instead apply second order stats to these values later
#identify the largest correlation for each pp
highest <- matrix(data = NA, nrow = numParticipants, ncol = 3)
for(i in PID){
dataX <-rValue[i,]
index <- which.max(dataX)
highest[i,index] <- max(dataX)
} #these are the strongest within individual correlations (not necessarily sig corrs)
minModel <- numParticipants - sum(is.na(highest[,1])) #33/58 show strongest corr for min model
maxModel <- numParticipants - sum(is.na(highest[,2])) #13/58 show strongest corr for max model
sumModel <- numParticipants - sum(is.na(highest[,3])) #12/58 show strongest corr for summed model
#numerical winner in min distance model favored by most pp - arguably still a bad fitting model though
#second order stats on the r-values of the model correlations to confidence
#running x3 paired ttests on the R values from the correlations with confidence
minMax <- t.test(rValue[,1], rValue[,2], paired = TRUE); minMax
#min has significantly different r mean values to max, difference in means of 0.04, p <0.001
#higher R values in min than max
minSum <- t.test(rValue[,1], rValue[,3], paired = TRUE); minSum
#minimum not significantly different r mean values to summed model, difference in means of just 0.01, p = 0.15
#min and summed not different
maxSum <- t.test(rValue[,2], rValue[,3], paired = TRUE); maxSum
#max sig different to Sum, neg diff of -0.03 so worse than sum?, p <0.001
#lower R values in max than summed
#so max is worst off? and R values between min and summed not distinguishably different
#so must rely on ideas of best fit for most people?
rm(minSig, maxSig, sumSig, minModel, maxModel, sumModel, i, dataX, index, correlations,
minSum, maxSum, minMax, DistCol, DistSize, sigCorrs, pValue, rValue, highest)
############### 4.0 Response bound work #######################################
#looking at response based bound as a fixed individual bound in the space
#this bound within individual will become the basis to rerun the above models
responseData <- confidence[c("PID", "distribution_name", "button", "correct", "confidence","fish_color", "fish_size")]
responseData$fish_size <- ((responseData$fish_size-200)/600) #put size in 0-1 space
#find one person as an example
pp1 <- subset(responseData, PID ==1)
ggplot(data=pp1, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, color = button))
#can see the vaguely follow the vertical and horizontal - but how will we define this?
#now lets find the response based boundary per participant
colorVector <- seq(0, 1, length.out = 100)
sizeVector <- seq(0, 1, length.out = 100)
countVerticalBlue <- matrix(data = NA, nrow = 100, ncol = 100)
countHorizontalRed <- matrix(data = NA, nrow = 100, ncol = 100)
countHorizontalBlue <- matrix(data = NA, nrow = 100, ncol = 100)
responseBound <- matrix(data = NA, nrow = length(PID), ncol = 3)
for(i in PID){ #for each pp
data <- subset(responseData, PID == i)
for(val in colorVector){
j <- match(c(val), colorVector) #set the horizontal value and index
for(value in sizeVector){
k <- match(c(value),sizeVector) #set the vertical value and index
#set size as the rows and color as the column - so each column holds a size constant
countVerticalBlue[k,j] <- sum(data$fish_size < value & data$button == 1)
countHorizontalRed[k,j] <- sum(data$fish_color > val & data$fish_size > value & data$button == 0)
countHorizontalBlue [k,j] <- sum(data$fish_color < val & data$fish_size > value & data$button == 1)
}
}
totalWrong <- countVerticalBlue + countHorizontalRed + countHorizontalBlue
indices <- which(totalWrong == min(totalWrong), arr.ind = TRUE) #find the minimum value index
colors <- unique(indices[,2])
sizes <- unique(indices[,1])
if (length(colors) == 1){
responseBound[i, 1] <- colorVector[colors[1]]
} else if(length(colors) %% 2 != 0){
responseBound[i, 1] <- colorVector[median(colors)]
} else if(length(colors)%% 2 == 0 & length(colors) < length(indices[,2])){
responseBound[i,1] <- colorVector[getmode(indices[,2])]
} else {responseBound[i,1] <- colorVector[mean(colors)]}
if (length(sizes) == 1){
responseBound[i, 2] <- sizeVector[sizes[1]]
} else if(length(sizes) %% 2 != 0){
responseBound[i, 2] <- sizeVector[median(sizes)]
} else if(length(sizes)%% 2 == 0 & length(sizes) < length(indices[,1])){
responseBound[i,2] <- sizeVector[getmode(indices[,1])]
} else {responseBound[i,2] <- sizeVector[mean(sizes)]
}
}
responseBound <- as.data.frame(responseBound)
responseBound$PID <- PID
responseBound$VerticalSize <- responseBound$V2
responseBound$HorizontalColor <- responseBound$V1
responseBound <- responseBound %>% select(-V1, -V2, -V3)
confidence <- merge(confidence, responseBound, by = c("PID"))
#plot these boundaries to sanity check them
confidence$fish_size <- ((confidence$fish_size-200)/600) #put size in 0-1 space
ggplot(data=confidence, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, shape = button_label, color = button_label)) +
#scale_color_gradient(low = "blue", high = "red") +
#scale_alpha_manual(values=c(0.2,0.5)) +
geom_vline(aes(xintercept = VerticalSize)) +
geom_hline(aes(yintercept = HorizontalColor)) +
facet_wrap( ~ PID)
###############################################################################
rm(countVerticalBlue, countHorizontalBlue, countHorizontalRed, indices,totalWrong,
colors, colorVector, i, j, k, sizes, sizeVector, val, value)
#can see the vaguely follow the vertical and horizontal - but how will we define this?
rm(pp1)
rm(minSig, maxSig, sumSig, minModel, maxModel, sumModel, i, dataX, index, correlations,
minSum, maxSum, minMax, DistCol, DistSize, sigCorrs, pValue, rValue, highest, modelData)
rm(gender, female, male, nonbinary, handedness, right, ambi, ageData, genderData, handData, lastTrial)
rm(countVerticalBlue, countHorizontalBlue, countHorizontalRed, indices,totalWrong,
colors, colorVector, i, j, k, sizes, sizeVector, val, value, data)
modelData <- confidence[c("PID", "distribution_name", "confidence","fish_color", "fish_size")]
#lets put size in the same space as color 0-1 space
modelData$fish_size <- ((modelData$fish_size-200)/600)
#find distances to color and size boundary again
DistCol <- abs((1/3) - modelData$fish_color)#pick color here
DistSize <- abs((1/3) - modelData$fish_size) #pick size here
#Let's consider:
#Minimum distance to bound (out of the two dimensions)
modelData <- modelData %>%
mutate(minimumDistance = ifelse(((DistCol-DistSize)>0),  DistSize, DistCol)
) %>%
mutate(minimumDistance = ((minimumDistance/(2/3))*100)) %>%
#Maximum distance to bound (out of the two dimensions)
mutate(maximumDistance = ifelse(((DistCol-DistSize)<0), DistSize, DistCol)
) %>%
mutate(maximumDistance = ((maximumDistance/(2/3))*100)) %>%
# Summed distance to bound (along the two dimensions)
mutate(summedDistance = (((DistCol + DistSize)/(4/3))*100)
)
cor.test(modelData$confidence, modelData$minimumDistance) #corr = 0.111, highest overall corr in minmodel
cor.test(modelData$confidence, modelData$maximumDistance) #corr = 0.064
cor.test(modelData$confidence, modelData$summedDistance)  #corr = 0.09
#not ideal way to look at these data
#instead: run correlation within each individual for the 3 models
pValue <- matrix(data = NA, nrow = numParticipants, ncol = 3)
rValue <- matrix(data = NA, nrow = numParticipants, ncol = 3)
PID <- c(1:numParticipants)
for(i in PID){
dataX <- subset(modelData, PID == i)
dataX <- dataX[c("confidence", "minimumDistance","maximumDistance", "summedDistance")]
correlations <- rcorr(as.matrix(dataX))
pValue[i,] <- correlations$P[1,2:4]
rValue[i,] <- correlations$r[1,2:4]
}
#check which of these correlations are significant
sigCorrs <- rValue
sigCorrs <- ifelse((pValue<0.05),  rValue, NA) #just highlights what corrs are significant
minSig <- numParticipants - sum(is.na(sigCorrs[,1])) #26/58 sig corr for min model --- marginally highest num here
maxSig <- numParticipants - sum(is.na(sigCorrs[,2])) #16/58 sig corr for max model
sumSig <- numParticipants - sum(is.na(sigCorrs[,3])) #24/58 sig for summed model
#numerical winner is min distance model in terms of most sig corrs but still not even 50%
#for some pp no corrs are sig, for some all are sig - this is not meaningful comparison to look into
#will instead apply second order stats to these values later
#identify the largest correlation for each pp
highest <- matrix(data = NA, nrow = numParticipants, ncol = 3)
for(i in PID){
dataX <-rValue[i,]
index <- which.max(dataX)
highest[i,index] <- max(dataX)
} #these are the strongest within individual correlations (not necessarily sig corrs)
minModel <- numParticipants - sum(is.na(highest[,1])) #33/58 show strongest corr for min model
maxModel <- numParticipants - sum(is.na(highest[,2])) #13/58 show strongest corr for max model
sumModel <- numParticipants - sum(is.na(highest[,3])) #12/58 show strongest corr for summed model
#numerical winner in min distance model favored by most pp - arguably still a bad fitting model though
#second order stats on the r-values of the model correlations to confidence
#running x3 paired ttests on the R values from the correlations with confidence
minMax <- t.test(rValue[,1], rValue[,2], paired = TRUE); minMax
#min has significantly different r mean values to max, difference in means of 0.04, p <0.001
#higher R values in min than max
minSum <- t.test(rValue[,1], rValue[,3], paired = TRUE); minSum
#minimum not significantly different r mean values to summed model, difference in means of just 0.01, p = 0.15
#min and summed not different
maxSum <- t.test(rValue[,2], rValue[,3], paired = TRUE); maxSum
#max sig different to Sum, neg diff of -0.03 so worse than sum?, p <0.001
#lower R values in max than summed
#so max is worst off? and R values between min and summed not distinguishably different
#so must rely on ideas of best fit for most people?
rm(minSig, maxSig, sumSig, minModel, maxModel, sumModel, i, dataX, index, correlations,
minSum, maxSum, minMax, DistCol, DistSize, sigCorrs, pValue, rValue, highest)
modelData <- merge(modelData, responseBound, by = c("PID"))
View(modelData)
#find distances to color and size boundary
modelData$DistColor <- abs((modelData$HorizontalColor) - modelData$fish_color)#pick color here
modelData$DistSize <- abs((modelData$VerticalSize) - modelData$fish_size) #pick size here
#Let's consider:
#Minimum distance to bound (out of the two dimensions)
modelData <- modelData %>%
mutate(minimumDistance = ifelse(((DistColor-DistSize)>0),  DistSize, DistCol)
) %>%
mutate(minimumDistance = ((minimumDistance/(2/3))*100)) %>%
#Maximum distance to bound (out of the two dimensions)
mutate(maximumDistance = ifelse(((DistColor-DistSize)<0), DistSize, DistCol)
) %>%
mutate(maximumDistance = ((maximumDistance/(2/3))*100)) %>%
# Summed distance to bound (along the two dimensions)
mutate(summedDistance = (((DistColor + DistSize)/(4/3))*100)
)
#Let's consider:
#Minimum distance to bound (out of the two dimensions)
modelData <- modelData %>%
mutate(minimumDistance = ifelse(((DistColor-DistSize)>0),  DistSize, DistColor)
) %>%
mutate(minimumDistance = ((minimumDistance/(2/3))*100)) %>%
#Maximum distance to bound (out of the two dimensions)
mutate(maximumDistance = ifelse(((DistColor-DistSize)<0), DistSize, DistColor)
) %>%
mutate(maximumDistance = ((maximumDistance/(2/3))*100)) %>%
# Summed distance to bound (along the two dimensions)
mutate(summedDistance = (((DistColor + DistSize)/(4/3))*100)
)
cor.test(modelData$confidence, modelData$minimumDistance) #corr = 0.111, highest overall corr in minmodel
cor.test(modelData$confidence, modelData$maximumDistance) #corr = 0.064
cor.test(modelData$confidence, modelData$summedDistance)  #corr = 0.09
#run correlation within each individual for the 3 models
pValue <- matrix(data = NA, nrow = numParticipants, ncol = 3)
rValue <- matrix(data = NA, nrow = numParticipants, ncol = 3)
for(i in PID){
dataX <- subset(modelData, PID == i)
dataX <- dataX[c("confidence", "minimumDistance","maximumDistance", "summedDistance")]
correlations <- rcorr(as.matrix(dataX))
pValue[i,] <- correlations$P[1,2:4]
rValue[i,] <- correlations$r[1,2:4]
}
#check which of these correlations are significant
sigCorrs <- rValue
sigCorrs <- ifelse((pValue<0.05),  rValue, NA) #just highlights what corrs are significant
View(sigCorrs)
minSig <- numParticipants - sum(is.na(sigCorrs[,1])) #26/58 sig corr for min model --- marginally highest num here
maxSig <- numParticipants - sum(is.na(sigCorrs[,2])) #16/58 sig corr for max model
sumSig <- numParticipants - sum(is.na(sigCorrs[,3])) #24/58 sig for summed model
#identify the largest correlation for each pp
highest <- matrix(data = NA, nrow = numParticipants, ncol = 3)
for(i in PID){
dataX <-rValue[i,]
index <- which.max(dataX)
highest[i,index] <- max(dataX)
} #these are the strongest within individual correlations (not necessarily sig corrs)
minModel <- numParticipants - sum(is.na(highest[,1])) #33/58 show strongest corr for min model
maxModel <- numParticipants - sum(is.na(highest[,2])) #13/58 show strongest corr for max model
sumModel <- numParticipants - sum(is.na(highest[,3])) #12/58 show strongest corr for summed model
#second order stats on the r-values of the model correlations to confidence
#running x3 paired ttests on the R values from the correlations with confidence
minMax <- t.test(rValue[,1], rValue[,2], paired = TRUE); minMax
#min has significantly different r mean values to max, difference in means of 0.06, p <0.01
#higher R values in min than max
minSum <- t.test(rValue[,1], rValue[,3], paired = TRUE); minSum
#minimum not significantly different r mean values to summed model, difference in means of just 0.01, p = 0.15
#min and summed not different
maxSum <- t.test(rValue[,2], rValue[,3], paired = TRUE); maxSum
rm(minSig, maxSig, sumSig, minModel, maxModel, sumModel, i, dataX, index, correlations,
minSum, maxSum, minMax, DistCol, DistSize, sigCorrs, pValue, rValue, highest)
#Let's consider:
#Minimum distance to bound (out of the two dimensions)
modelData <- modelData %>%
mutate(minimumDistance = ifelse(((DistColor-DistSize)>0),  DistSize, DistColor)
) %>%
mutate(minimumDistance = ((minimumDistance/(1-minimumDistance))*100)) %>%
#Maximum distance to bound (out of the two dimensions)
mutate(maximumDistance = ifelse(((DistColor-DistSize)<0), DistSize, DistColor)
) %>%
mutate(maximumDistance = ((maximumDistance/(1-maximumDistance))*100)) %>%
# Summed distance to bound (along the two dimensions)
mutate(summedDistance = (((DistColor + DistSize)/(1+ mean(DistColor + DistSize)))*100)
)
#run correlation within each individual for the 3 models
pValue <- matrix(data = NA, nrow = numParticipants, ncol = 3)
rValue <- matrix(data = NA, nrow = numParticipants, ncol = 3)
for(i in PID){
dataX <- subset(modelData, PID == i)
dataX <- dataX[c("confidence", "minimumDistance","maximumDistance", "summedDistance")]
correlations <- rcorr(as.matrix(dataX))
pValue[i,] <- correlations$P[1,2:4]
rValue[i,] <- correlations$r[1,2:4]
}
#check which of these correlations are significant
sigCorrs <- rValue
sigCorrs <- ifelse((pValue<0.05),  rValue, NA) #just highlights what corrs are significant
minSig <- numParticipants - sum(is.na(sigCorrs[,1])) #18/58 sig corr for min model
maxSig <- numParticipants - sum(is.na(sigCorrs[,2])) #13/58 sig corr for max model
sumSig <- numParticipants - sum(is.na(sigCorrs[,3])) #20/58 sig for summed model
#identify the largest correlation for each pp
highest <- matrix(data = NA, nrow = numParticipants, ncol = 3)
for(i in PID){
dataX <-rValue[i,]
index <- which.max(dataX)
highest[i,index] <- max(dataX)
} #these are the strongest within individual correlations (not necessarily sig corrs)
minModel <- numParticipants - sum(is.na(highest[,1])) #26/58 show strongest corr for min model
minModel <- numParticipants - sum(is.na(highest[,1])) #26/58 show strongest corr for min model
maxModel <- numParticipants - sum(is.na(highest[,2])) #22/58 show strongest corr for max model
sumModel <- numParticipants - sum(is.na(highest[,3])) #10/58 show strongest corr for summed model
#second order stats on the r-values of the model correlations to confidence
#running x3 paired ttests on the R values from the correlations with confidence
minMax <- t.test(rValue[,1], rValue[,2], paired = TRUE); minMax
#min has significantly different r mean values to max, difference in means of 0.06, p <0.01
#higher R values in min than max
minSum <- t.test(rValue[,1], rValue[,3], paired = TRUE); minSum
#minimum not significantly different r mean values to summed model, difference in means of just 0.01, p = 0.15
#min and summed not different
maxSum <- t.test(rValue[,2], rValue[,3], paired = TRUE); maxSum
#second order stats on the r-values of the model correlations to confidence
#running x3 paired ttests on the R values from the correlations with confidence
minMax <- t.test(rValue[,1], rValue[,2], paired = TRUE); minMax
#min has significantly different r mean values to max, difference in means of 0.06, p <0.01
#higher R values in min than max
minSum <- t.test(rValue[,1], rValue[,3], paired = TRUE); minSum
maxSum <- t.test(rValue[,2], rValue[,3], paired = TRUE); maxSum
mean(modelData$DistColor + modelData$DistSize)
modelData$DistColor + modelData$DistSize
2*mean(DistColor + DistSize)
2*mean(modelData$DistColor + modelData$DistSize)
(mean(mean(modelData$DistColor),mean(modelData$DistSize))
(mean(mean(modelData$DistColor),mean(modelData$DistSize)))
)
(mean(mean(modelData$DistColor),mean(modelData$DistSize))))
(mean(mean(modelData$DistColor),mean(modelData$DistSize)))
#Let's consider:
#Minimum distance to bound (out of the two dimensions)
modelData <- modelData %>%
mutate(minimumDistance = ifelse(((DistColor-DistSize)>0),  DistSize, DistColor)
) %>%
mutate(minimumDistance = ((minimumDistance/(1-minimumDistance))*100)) %>%
#Maximum distance to bound (out of the two dimensions)
mutate(maximumDistance = ifelse(((DistColor-DistSize)<0), DistSize, DistColor)
) %>%
mutate(maximumDistance = ((maximumDistance/(1-maximumDistance))*100)) %>%
# Summed distance to bound (along the two dimensions)
mutate(summedDistance = ((((DistColor + DistSize)/(1+mean(mean(DistColor),mean(DistSize))))*100))
)
#run correlation within each individual for the 3 models
pValue <- matrix(data = NA, nrow = numParticipants, ncol = 3)
rValue <- matrix(data = NA, nrow = numParticipants, ncol = 3)
for(i in PID){
dataX <- subset(modelData, PID == i)
dataX <- dataX[c("confidence", "minimumDistance","maximumDistance", "summedDistance")]
correlations <- rcorr(as.matrix(dataX))
pValue[i,] <- correlations$P[1,2:4]
rValue[i,] <- correlations$r[1,2:4]
}
#check which of these correlations are significant
sigCorrs <- rValue
sigCorrs <- ifelse((pValue<0.05),  rValue, NA) #just highlights what corrs are significant
minSig <- numParticipants - sum(is.na(sigCorrs[,1])) #18/58 sig corr for min model
maxSig <- numParticipants - sum(is.na(sigCorrs[,2])) #12/58 sig corr for max model
sumSig <- numParticipants - sum(is.na(sigCorrs[,3])) #20/58 sig for summed model
#identify the largest correlation for each pp
highest <- matrix(data = NA, nrow = numParticipants, ncol = 3)
for(i in PID){
dataX <-rValue[i,]
index <- which.max(dataX)
highest[i,index] <- max(dataX)
} #these are the strongest within individual correlations (not necessarily sig corrs)
minModel <- numParticipants - sum(is.na(highest[,1])) #12/58 show strongest corr for min model
maxModel <- numParticipants - sum(is.na(highest[,2])) #23/58 show strongest corr for max model
sumModel <- numParticipants - sum(is.na(highest[,3])) #23/58 show strongest corr for summed model
#second order stats on the r-values of the model correlations to confidence
#running x3 paired ttests on the R values from the correlations with confidence
minMax <- t.test(rValue[,1], rValue[,2], paired = TRUE); minMax
#min has significantly different r mean values to max, difference in means of 0.06, p <0.01
#higher R values in min than max
minSum <- t.test(rValue[,1], rValue[,3], paired = TRUE); minSum
(1+mean(mean(modelData$DistColor),mean(modelData$DistSize))))
(1+mean(mean(modelData$DistColor),mean(modelData$DistSize)))
(4*mean(mean(modelData$DistColor),mean(modelData$DistSize)))
#Let's consider:
#Minimum distance to bound (out of the two dimensions)
modelData <- modelData %>%
mutate(minimumDistance = ifelse(((DistColor-DistSize)>0),  DistSize, DistColor)
) %>%
mutate(minimumDistance = ((minimumDistance/(1-minimumDistance))*100)) %>%
#Maximum distance to bound (out of the two dimensions)
mutate(maximumDistance = ifelse(((DistColor-DistSize)<0), DistSize, DistColor)
) %>%
mutate(maximumDistance = ((maximumDistance/(1-maximumDistance))*100)) %>%
# Summed distance to bound (along the two dimensions)
mutate(summedDistance = ((((DistColor + DistSize)/(4*mean(mean(DistColor),mean(DistSize))))*100))
)
#run correlation within each individual for the 3 models
pValue <- matrix(data = NA, nrow = numParticipants, ncol = 3)
rValue <- matrix(data = NA, nrow = numParticipants, ncol = 3)
for(i in PID){
dataX <- subset(modelData, PID == i)
dataX <- dataX[c("confidence", "minimumDistance","maximumDistance", "summedDistance")]
correlations <- rcorr(as.matrix(dataX))
pValue[i,] <- correlations$P[1,2:4]
rValue[i,] <- correlations$r[1,2:4]
}
#check which of these correlations are significant
sigCorrs <- rValue
sigCorrs <- ifelse((pValue<0.05),  rValue, NA) #just highlights what corrs are significant
minSig <- numParticipants - sum(is.na(sigCorrs[,1])) #18/58 sig corr for min model
maxSig <- numParticipants - sum(is.na(sigCorrs[,2])) #12/58 sig corr for max model
sumSig <- numParticipants - sum(is.na(sigCorrs[,3])) #20/58 sig for summed model
#identify the largest correlation for each pp
highest <- matrix(data = NA, nrow = numParticipants, ncol = 3)
for(i in PID){
dataX <-rValue[i,]
index <- which.max(dataX)
highest[i,index] <- max(dataX)
} #these are the strongest within individual correlations (not necessarily sig corrs)
minModel <- numParticipants - sum(is.na(highest[,1])) #12/58 show strongest corr for min model
maxModel <- numParticipants - sum(is.na(highest[,2])) #23/58 show strongest corr for max model
sumModel <- numParticipants - sum(is.na(highest[,3])) #23/58 show strongest corr for summed model
#second order stats on the r-values of the model correlations to confidence
#running x3 paired ttests on the R values from the correlations with confidence
minMax <- t.test(rValue[,1], rValue[,2], paired = TRUE); minMax
#min has significantly different r mean values to max, difference in means of 0.06, p <0.01
#higher R values in min than max
minSum <- t.test(rValue[,1], rValue[,3], paired = TRUE); minSum
maxSum <- t.test(rValue[,2], rValue[,3], paired = TRUE); maxSum
ggplot(data=confidence, aes(fish_size)) + #the trials worked - labelling was correct
geom_point(mapping = aes(x = fish_size, y = fish_color, color = distribution_name))
ggplot(data=confidence, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, shape = distribution_name, color = confidence)) +
scale_color_gradient(low = "blue", high = "red") +
facet_wrap( ~ PID)
#and perhaps to 'valence' the color scale to indicate the actual judgment made (native/invasive).
ggplot(data=confidence, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, shape = distribution_name, color = confidence, alpha = button_label)) +
scale_color_gradient(low = "blue", high = "red") +
scale_alpha_manual(values=c(0.2,0.5)) +
facet_wrap( ~ PID)
#plotting confidence scores normalised, (z-scored within participant)
#which might bring out some variability that's hard to see in these full-scale plots
meanConf <- confidence %>%
group_by(PID) %>%
dplyr::summarise(mean(confidence))
sdConf <- confidence %>%
group_by(PID) %>%
dplyr::summarise(sd(confidence))
zConf <- matrix(data = NA, nrow = 160, ncol = numParticipants)
pps <- 1:numParticipants
for(i in pps){
PIDConf <- subset(confidence, PID == i)
#z = (x-μ)/σ
trials <- 1:length(PIDConf$trial_index)
for(j in trials){
x <- (PIDConf$confidence[j] - meanConf[i,2])/(sdConf[i,2])
zConf[j,i] <- as.numeric(x)
}
}
#wrangle zConf back into a single column -remove NA to merge with confidence dataframe
zConfCol <- as.data.frame(zConf[,1])
names(zConfCol)[1] <- 'conf'
pp <- 2:length(pps)
for(i in pp){
z <-as.data.frame(zConf[,i])
names(z)[1] <- 'conf'
zConfCol <- rbind(zConfCol, z)
}
zConf <- subset(zConfCol, is.na(conf)!= TRUE) #remove the 17 missing trials to match up the columns with confidence
confidence$zConf <- zConf$conf
ggplot(data=confidence, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, shape = distribution_name, color = zConf)) +
scale_color_gradient(low = "white", high = "black") +
facet_wrap( ~ PID) #very hard to see here pulled by very low and very high?
high <- subset(confidence, zConf < -2) # 327 trials have a z score of less than -5
low <- subset(confidence, zConf > 2) #78 trials here have z score of more that 5
rm(high, low)
#remove those 14 trials just to improve the color gradient in the viz
confSubset <- subset(confidence, zConf < 2 & zConf > -2) #still have 8778 trials here
ggplot(data=confSubset, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, shape = distribution_name, color = zConf)) +
scale_color_gradient(low = "blue", high = "red") +
facet_wrap( ~ PID) #a little easire to see here
#and perhaps to 'valence' the color scale to indicate the actual judgment made (native/invasive).
ggplot(data=confSubset, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, shape = distribution_name, color = zConf, alpha = button_label)) +
scale_color_gradient(low = "blue", high = "red") +
scale_alpha_manual(values=c(0.2,0.5)) +
facet_wrap( ~ PID)
confSubset1 <- subset(confSubset, PID == 1)
ggplot(data=confSubset1, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, shape = distribution_name, color = zConf, alpha = button_label)) +
scale_color_gradient(low = "blue", high = "red") +
scale_alpha_manual(values=c(0.2,0.5))
ggplot(data=confSubset, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, shape = distribution_name, color = zConf, alpha = button_label)) +
scale_color_gradient(low = "blue", high = "red") +
scale_alpha_manual(values=c(0.2,0.5))
#and perhaps to 'valence' the color scale to indicate the actual judgment made (native/invasive).
ggplot(data=confSubset, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, shape = distribution_name, color = zConf, alpha = button_label)) +
scale_color_gradient(low = "blue", high = "red") +
scale_alpha_manual(values=c(0.2,0.5)) +
facet_wrap( ~ PID)
ggplot(data=confidence, aes(fish_size)) +
geom_point(mapping = aes(x = fish_size, y = fish_color, shape = button_label, color = button_label)) +
#scale_color_gradient(low = "blue", high = "red") +
#scale_alpha_manual(values=c(0.2,0.5)) +
geom_vline(aes(xintercept = VerticalSize)) +
geom_hline(aes(yintercept = HorizontalColor)) +
facet_wrap( ~ PID)
